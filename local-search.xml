<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“Z”型矩阵</title>
    <link href="/2022/03/24/%E2%80%9CZ%E2%80%9D%E5%9E%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2022/03/24/%E2%80%9CZ%E2%80%9D%E5%9E%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意：</h2><p>对于一个只包含 <code>.</code> 和 <code>z</code> 的矩阵，当以下条件满足时：</p><ol><li>该矩阵的行数列数相等。</li><li>该矩阵的第一行与最后一行的字符全是 <code>z</code>。</li><li>该矩阵从右上角到左下角的对角线上的字符全是 <code>z</code>。</li></ol><p>我们称其为 <code>Z</code> 矩阵。</p><p>现在给定一个 n×mn×m 的矩阵，请你计算它有多少个子矩阵是 <code>Z</code> 矩阵。</p><h3 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h3><p>第一行两个整数 nn , mm 分别表示矩阵的行数和列数 (1≤n,m≤3×103)(1≤n,m≤3×103)。</p><p>接下来 nn 行, 每行包含 mm 个字符, 表示该矩阵。</p><h3 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h3><p>输出一行一个整数表示 <code>Z</code> 矩阵的数量。</p><h3 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h3><figure class="highlight erlang"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-number">4</span> <span class="hljs-number">4</span><br>zzzz<br>z.z.<br>.zz.<br>zzzz<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">14<br></code></pre></td></tr></table></figure><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h2><p>好题，但不会！看题解学的，具体过程参考这位大佬的知乎。</p><p><a href="https://zhuanlan.zhihu.com/p/486600382">https://zhuanlan.zhihu.com/p/486600382</a></p><p>简单说一下就是遍历对角线，在对角线上建树状数组，将每个连续的“z”看作一段，离线维护线段上每点的左右“z”各能到达的最远位置。然后遍历这个线段，维护每个点能到达后续点的的贡献，凡是能到达的后续点都可以利用到此点的贡献。(看不懂就看原dalao的知乎就完了)</p><p>然后贴出我的代码，虽然和大佬的代码基本一样，但是因为原代码的树状数组部分没给，我的写法与dalao还有一丝丝不同。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e3</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> g[N][N],L[N][N],R[N][N],t[N];<br>pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;line[<span class="hljs-number">2</span>*N];<br>vector&lt;<span class="hljs-type">int</span>&gt;del[<span class="hljs-number">2</span>*N];<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-type">int</span> s1=<span class="hljs-number">0</span>,s2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(L&gt;<span class="hljs-number">0</span>)&#123;<br>s1+=t[L];<br>L-=<span class="hljs-built_in">lowbit</span>(L);<br>&#125;<br><span class="hljs-keyword">while</span>(R&gt;<span class="hljs-number">0</span>)&#123;<br>s2+=t[R];<br>R-=<span class="hljs-built_in">lowbit</span>(R);<br>&#125;<br><span class="hljs-keyword">return</span> s2-s1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> w)</span></span>&#123;<br><span class="hljs-keyword">while</span>(x&lt;=cnt)&#123;<br>t[x]+=w;<br>x+=<span class="hljs-built_in">lowbit</span>(x);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//cout&lt;&lt;endl;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)&#123;<br><span class="hljs-type">int</span> L=line[i].first,R=line[i].second;<br>ans+=<span class="hljs-built_in">query</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,i-R+<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>,i);<br><span class="hljs-keyword">if</span>(L&gt;<span class="hljs-number">1</span>)<span class="hljs-built_in">add</span>(i,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;&#x27; &#x27;&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;L&lt;&lt;&#x27; &#x27;&lt;&lt;R&lt;&lt;endl;</span><br><span class="hljs-keyword">if</span>(L&gt;<span class="hljs-number">1</span>)del[<span class="hljs-built_in">min</span>(cnt,i+L<span class="hljs-number">-1</span>)].<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x:del[i])<span class="hljs-built_in">add</span>(x,<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">memset</span>(t,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(t));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)del[i].<span class="hljs-built_in">clear</span>();<br>cnt=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-type">char</span> c;<br>cin&gt;&gt;c;<br>g[i][j]=c==<span class="hljs-string">&#x27;z&#x27;</span>;<br>ans+=c==<span class="hljs-string">&#x27;z&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-keyword">if</span>(g[i][j])L[i][j]=L[i][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br><span class="hljs-keyword">if</span>(g[i][j])R[i][j]=R[i][j+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=<span class="hljs-number">2</span>;d&lt;=n+m;d++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,d-m);i&lt;=<span class="hljs-built_in">min</span>(n,d<span class="hljs-number">-1</span>);i++)&#123;<br><span class="hljs-type">int</span> j=d-i;<br><span class="hljs-keyword">if</span>(!g[i][j])&#123;<br><span class="hljs-keyword">if</span>(cnt)<span class="hljs-built_in">solve</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>line[++cnt]=&#123;L[i][j],R[i][j]&#125;;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt)<span class="hljs-built_in">solve</span>();<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树状数组</tag>
      
      <tag>离线</tag>
      
      <tag>代码源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求质因子模板</title>
    <link href="/2022/03/23/%E6%B1%82%E8%B4%A8%E5%9B%A0%E5%AD%90%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/03/23/%E6%B1%82%E8%B4%A8%E5%9B%A0%E5%AD%90%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>复杂度大概O(nlnn)吧</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;N; i++) &#123;<br><span class="hljs-keyword">if</span>(tt[i].<span class="hljs-built_in">size</span>())<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&lt;N; j+=i) &#123;<br><span class="hljs-type">int</span> t=j,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(t%i==<span class="hljs-number">0</span>)t/=i,cnt++;<br>tt[j].<span class="hljs-built_in">push_back</span>(&#123;i,cnt&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>质因子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合数模板</title>
    <link href="/2022/03/23/%E7%BB%84%E5%90%88%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/03/23/%E7%BB%84%E5%90%88%E6%95%B0%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>复杂度O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e6</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(b) &#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)c=(<span class="hljs-number">1ll</span>*c*a)%mod;<br>a=<span class="hljs-number">1ll</span>*a*a%mod;<br>b&gt;&gt;=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(n&lt;m||m&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> fac[n]*infac[n-m]%mod*infac[m]%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>fac[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;N; i++)fac[i]=<span class="hljs-number">1ll</span>*fac[i<span class="hljs-number">-1</span>]*i%mod;<br>infac[N<span class="hljs-number">-1</span>]=<span class="hljs-built_in">Pow</span>(fac[N<span class="hljs-number">-1</span>],mod<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=N<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">1</span>; i--)infac[i<span class="hljs-number">-1</span>]=<span class="hljs-number">1ll</span>*infac[i]*i%mod;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串处理技巧</title>
    <link href="/2022/03/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/03/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串处理常用技巧"><a class="markdownIt-Anchor" href="#字符串处理常用技巧"></a> 字符串处理常用技巧</h1><h3 id="1-find以及其他查找函数"><a class="markdownIt-Anchor" href="#1-find以及其他查找函数"></a> 1、find()以及其他查找函数</h3><h6 id="find"><a class="markdownIt-Anchor" href="#find"></a> find()</h6><p>int find(char c, int pos = 0) const;//从pos开始查找字符c在当前字符串的位置<br />int find(const char *s, int pos = 0) const;//从pos开始查找字符串s在当前串中的位置<br />int find(const char *s, int pos, int n) const;//从pos开始查找字符串s中前n个字符在当前串中的位置<br />int find(const string &amp;s, int pos = 0) const;//从pos开始查找字符串s在当前串中的位置<br />//查找成功时返回所在位置，失败返回<strong>string::npos</strong>的值</p><h6 id="rfind"><a class="markdownIt-Anchor" href="#rfind"></a> rfind()</h6><p>int rfind(char c, int pos = npos) const;//从pos开始从后向前查找字符c在当前串中的位置<br />int rfind(const char *s, int pos = npos) const;<br />int rfind(const char *s, int pos, int n = npos) const;<br />int rfind(const string &amp;s,int pos = npos) const;<br />//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回<strong>string::npos</strong>的值</p><h6 id="find_first_not_of"><a class="markdownIt-Anchor" href="#find_first_not_of"></a> find_first_not_of()</h6><p>int find_first_not_of(char c, int pos = 0) const;<br />int find_first_not_of(const char *s, int pos = 0) const;<br />int find_first_not_of(const char *s, int pos,int n) const;<br />int find_first_not_of(const string &amp;s,int pos = 0) const;<br />//从当前串中查找第一个不在串s中的字符出现的位置，失败返回<strong>string::npos</strong></p><h6 id="find_last_not_of"><a class="markdownIt-Anchor" href="#find_last_not_of"></a> find_last_not_of()</h6><p>int find_last_not_of(char c, int pos = npos) const;<br />int find_last_not_of(const char *s, int pos = npos) const;<br />int find_last_not_of(const char *s, int pos, int n) const;<br />int find_last_not_of(const string &amp;s,int pos = npos) const;</p><p>//从当前串从后往前查找第一个不在串s中的字符出现的位置，失败则返回<strong>string::npos</strong></p><h3 id="2-c_str"><a class="markdownIt-Anchor" href="#2-c_str"></a> 2、c_str()</h3><p>可以将string转换为*char类型</p><h3 id="3-更改内容"><a class="markdownIt-Anchor" href="#3-更改内容"></a> 3、更改内容</h3><h6 id="substrint-stint-len"><a class="markdownIt-Anchor" href="#substrint-stint-len"></a> substr(int st,int len)</h6><p>可以返回st开始len个字符的字符串</p><h6 id="s"><a class="markdownIt-Anchor" href="#s"></a> +s</h6><p>在首或尾添加字符串</p><h6 id="assign可以实现更灵活的赋值"><a class="markdownIt-Anchor" href="#assign可以实现更灵活的赋值"></a> assign()//可以实现更灵活的赋值</h6><p>s.assign(str,1,3);//如果str是”iamangel” 就是把”ama”赋给字符串<br />s.assign(str,2,string::npos);//把字符串str从索引值2开始到结尾赋给s</p><p>s.assign(“nico”,5);//把’n’ ‘I’ ‘c’ ‘o’ ‘/0’赋给字符串<br />s.assign(5,‘x’);//把五个x赋给字符串</p><h6 id="append"><a class="markdownIt-Anchor" href="#append"></a> append()</h6><p>s.append(str,1,3);//不解释了 同前面的函数参数assign的解释<br />s.append(str,2,string::npos)//不解释了<br />s.append(“nico”,5);<br />s.append(5,‘x’);</p><h6 id="insert在某个位置插入字符串"><a class="markdownIt-Anchor" href="#insert在某个位置插入字符串"></a> insert()//在某个位置插入字符串</h6><p>s.insert(0,”my name”);在0处插入字符串<br />s.insert(1,str);</p><p>string &amp;insert(int p0, const char *s);<br />string &amp;insert(int p0, const char *s, int n);<br />string &amp;insert(int p0,const string &amp;s);<br />string &amp;insert(int p0,const string &amp;s, int pos, int n);<br />//前4个函数在p0位置插入字符串s中pos开始的前n个字符<br />string &amp;insert(int p0, int n, char c);//此函数在p0处插入n个字符c<br />iterator insert(iterator it, char c);//在it处插入字符c，返回插入后迭代器的位置<br />void insert(iterator it, const_iterator first, const_iterator last);//在it处插入[first，last）之间的字符<br />void insert(iterator it, int n, char c);//在it处插入n个字符c</p><p><strong>insert()不支持插入单个字符！！</strong></p><p>为了插 入单个字符，insert()函数提供了两个对插入单个字符操作的重载函数：insert(size_type index,size_type num,chart c)和insert(iterator pos,size_type num,chart c)。其中size_type是无符号整数，iterator是char*,所以，你这么调用insert函数是不行的：insert(0,1, ‘j’);这时候第一个参数将转换成哪一个呢？所以你必须这么写：insert((string::size_type)0,1,‘j’)！</p><h6 id="erase去除字符串"><a class="markdownIt-Anchor" href="#erase去除字符串"></a> erase()//去除字符串</h6><p>s.erase(13);//从索引13开始往后全删除<br />s.erase(7,5);//从索引7开始往后删5个</p><p>iterator erase(iterator first, iterator last);//删除[first，last）之间的所有字符，返回删除后迭代器的位置<br />iterator erase(iterator it);//删除it指向的字符，返回删除后迭代器的位置<br />string &amp;erase(int pos = 0, int n = npos);//删除pos开始的n个字符，返回修改后的字符串</p><h6 id="replace替换字符串"><a class="markdownIt-Anchor" href="#replace替换字符串"></a> replace()//替换字符串</h6><p>s.replace(1,2,”nternationalizatio”);//从索引1开始的2个替换成后面的C_string</p><p>string &amp;replace(int p0, int n0,const char *s);//删除从p0开始的n0个字符，然后在p0处插入串s<br />string &amp;replace(int p0, int n0,const char *s, int n);//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符<br />string &amp;replace(int p0, int n0,const string &amp;s);//删除从p0开始的n0个字符，然后在p0处插入串s<br />string &amp;replace(int p0, int n0,const string &amp;s, int pos, int n);//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符<br />string &amp;replace(int p0, int n0,int n, char c);//删除p0开始的n0个字符，然后在p0处插入n个字符c<br />string &amp;replace(iterator first0, iterator last0,const char *s);//把[first0，last0）之间的部分替换为字符串s<br />string &amp;replace(iterator first0, iterator last0,const char *s, int n);//把[first0，last0）之间的部分替换为s的前n个字符<br />string &amp;replace(iterator first0, iterator last0,const string &amp;s);//把[first0，last0）之间的部分替换为串s<br />string &amp;replace(iterator first0, iterator last0,int n, char c);//把[first0，last0）之间的部分替换为n个字符c<br />string &amp;replace(iterator first0, iterator last0,const_iterator first, const_iterator last);//把[first0，last0）之间的部分替换成[first，last）之间的字符串</p><h5 id="以上内容大部分引自httpsblogcsdnnetfdqw_spharticledetails54233971-c中的string常用函数用法总结"><a class="markdownIt-Anchor" href="#以上内容大部分引自httpsblogcsdnnetfdqw_spharticledetails54233971-c中的string常用函数用法总结"></a> 以上内容大部分引自https://blog.csdn.net/fdqw_sph/article/details/54233971 《c++中的string常用函数用法总结》</h5><h3 id="4-sscanf"><a class="markdownIt-Anchor" href="#4-sscanf"></a> 4、sscanf()</h3><p><strong>int sscanf(const char *str, const char *format, …)</strong></p><p><strong>例题：L2-012 关于堆的判断</strong><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805064676261888">https://pintia.cn/problem-sets/994805046380707840/problems/994805064676261888</a></p><p>使用例子：sscanf(s.c_str(),&quot;%d is %s %s of %d&quot;,&amp;a,smp1,smp2,&amp;b);</p><h3 id="5-cout输出格式控制"><a class="markdownIt-Anchor" href="#5-cout输出格式控制"></a> 5、cout输出格式控制</h3><h4 id="1控制符控制输出格式"><a class="markdownIt-Anchor" href="#1控制符控制输出格式"></a> (1)控制符控制输出格式</h4><h5 id="setbasen-设置整数的基数n只能是81016三者之一"><a class="markdownIt-Anchor" href="#setbasen-设置整数的基数n只能是81016三者之一"></a> setbase(n) 设置整数的基数(n只能是8，10，16三者之一)</h5><h5 id="setfill-设置填充字符cc可以是字符常量或字符串变量"><a class="markdownIt-Anchor" href="#setfill-设置填充字符cc可以是字符常量或字符串变量"></a> setfill© 设置填充字符c，c可以是字符常量或***字符串变量***</h5><h5 id="setpercisionn-设置实数精度为n位-在以一般十进制小数形式输入时n表示有效数字-在以fixed固定小数位数形式和scientific指数形式输出时n为小数位数"><a class="markdownIt-Anchor" href="#setpercisionn-设置实数精度为n位-在以一般十进制小数形式输入时n表示有效数字-在以fixed固定小数位数形式和scientific指数形式输出时n为小数位数"></a> setpercision(n) 设置实数精度为n位。在以一般十进制小数形式输入时，n表示有效数字。在以fixed(固定小数位数)形式和scientific(指数)形式输出时，n为小数位数。</h5><h5 id="setwn-设置实数的精度为n位"><a class="markdownIt-Anchor" href="#setwn-设置实数的精度为n位"></a> setw(n) 设置实数的精度为n位</h5><h5 id="setiosflagsiosshowbase-输出时显示进制指示符0表示八进制0x或0x表示十六进制"><a class="markdownIt-Anchor" href="#setiosflagsiosshowbase-输出时显示进制指示符0表示八进制0x或0x表示十六进制"></a> <strong>setiosflags</strong>(ios::showbase) 输出时显示进制指示符(0表示八进制，0x或0X表示十六进制)</h5><h5 id="setiosflagsiosfixed-设置浮点数以固定的小数位数显示"><a class="markdownIt-Anchor" href="#setiosflagsiosfixed-设置浮点数以固定的小数位数显示"></a> setiosflags(ios::fixed) 设置浮点数以固定的小数位数显示</h5><h5 id="setiosflagsiosscientific-设置浮点数以科学计数法显示"><a class="markdownIt-Anchor" href="#setiosflagsiosscientific-设置浮点数以科学计数法显示"></a> setiosflags(ios::scientific) 设置浮点数以科学计数法显示</h5><h5 id="setiosflagsiosleft-数据左对齐"><a class="markdownIt-Anchor" href="#setiosflagsiosleft-数据左对齐"></a> setiosflags(ios::left) 数据左对齐</h5><h5 id="setiosflagsiosright-数据右对齐"><a class="markdownIt-Anchor" href="#setiosflagsiosright-数据右对齐"></a> setiosflags(ios::right) 数据右对齐</h5><h5 id="setiosflagsiosskipws-忽略前导零"><a class="markdownIt-Anchor" href="#setiosflagsiosskipws-忽略前导零"></a> setiosflags(ios::skipws) 忽略前导零</h5><h4 id="2流成员函数控制输出格式"><a class="markdownIt-Anchor" href="#2流成员函数控制输出格式"></a> (2)流成员函数控制输出格式</h4><p>同上比较</p><h5 id="percisionnsetpercisionn"><a class="markdownIt-Anchor" href="#percisionnsetpercisionn"></a> percision(n)=setpercision(n)</h5><h5 id="widthnsetwn"><a class="markdownIt-Anchor" href="#widthnsetwn"></a> width(n)=setw(n)</h5><h5 id="fillsetfill"><a class="markdownIt-Anchor" href="#fillsetfill"></a> fill©=setfill©</h5><h5 id="setfsetioflags"><a class="markdownIt-Anchor" href="#setfsetioflags"></a> setf()=setioflags()</h5>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间信息维护查询</title>
    <link href="/2022/03/22/%E5%8C%BA%E9%97%B4%E4%BF%A1%E6%81%AF%E7%BB%B4%E6%8A%A4%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/03/22/%E5%8C%BA%E9%97%B4%E4%BF%A1%E6%81%AF%E7%BB%B4%E6%8A%A4%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="区间信息维护查询"><a class="markdownIt-Anchor" href="#区间信息维护查询"></a> 区间信息维护查询</h1><h2 id="一-二叉索引树树状数组binary-indexed-treebit"><a class="markdownIt-Anchor" href="#一-二叉索引树树状数组binary-indexed-treebit"></a> 一、二叉索引树(树状数组)（Binary Indexed Tree,BIT)</h2><h4 id="bit支持两种操作"><a class="markdownIt-Anchor" href="#bit支持两种操作"></a> BIT支持两种操作</h4><h6 id="1updatex修改单点值"><a class="markdownIt-Anchor" href="#1updatex修改单点值"></a> 1.update(x):修改<mark>单点</mark>值</h6><h6 id="2querylr查询lr区间和"><a class="markdownIt-Anchor" href="#2querylr查询lr区间和"></a> 2.query(L,R)：查询(L,R)区间和</h6><h4 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式：</h4><h5 id="首先我们介绍一下lowbitx"><a class="markdownIt-Anchor" href="#首先我们介绍一下lowbitx"></a> 首先我们介绍一下lowbit(x)</h5><h5 id="lowbitx表示x的二进制表达式中最右边的1所对应的值"><a class="markdownIt-Anchor" href="#lowbitx表示x的二进制表达式中最右边的1所对应的值"></a> lowbit(x)表示x的二进制表达式中<mark>最右边的1所对应的值</mark></h5><h5 id="程序实现为lowbitxreturn-x-x"><a class="markdownIt-Anchor" href="#程序实现为lowbitxreturn-x-x"></a> 程序实现为lowbit(x)={return x&amp;(-x)}</h5><p>原理就是计算机的整数用补码表示，所以==-x就是x按位取反，末尾加1==</p><p><img src="D:%5Cblog%5Csource%5Cpicture%5Cbit%E7%A4%BA%E6%84%8F.png" alt="bit示意" /></p><p>上图就是典型的BIT</p><h5 id="通过观查我们发现对于节点i如果i是右儿子i的父节点为i-lowbiti如果i是左儿子i的父节点为ilowbiti"><a class="markdownIt-Anchor" href="#通过观查我们发现对于节点i如果i是右儿子i的父节点为i-lowbiti如果i是左儿子i的父节点为ilowbiti"></a> 通过观查我们发现对于节点i,如果i是右儿子,i的父节点为i-lowbit(i),如果i是左儿子,i的父节点为i+lowbit(i).</h5><p>然后我们构造一个辅助数组C</p><h5 id="ciai-lowbiti1ai-lowbiti1ai"><a class="markdownIt-Anchor" href="#ciai-lowbiti1ai-lowbiti1ai"></a> C<sub>i</sub>=A<sub>i-lowbit(i)+1</sub>+A<sub>i-lowbit(i)+1</sub>+…+A<sub>i</sub></h5><h5 id="即ci为区间i-lowbiti1i的和上图的长方形块"><a class="markdownIt-Anchor" href="#即ci为区间i-lowbiti1i的和上图的长方形块"></a> 即C<sub>i</sub>为区间[i-lowbit(i)+1,i]的和(上图的长方形块)</h5><p>有了这些准备后我们就要开始思考如何进行add和query的操作</p><h4 id="querylr"><a class="markdownIt-Anchor" href="#querylr"></a> query(L,R):</h4><p>根据前缀和的思路，我们想到可以分别求出前缀和S[R]和S[L]得到query()的值</p><p><u>以S[L]为例</u>，L以二进制表示，则可以表示为以2为底的幂的和</p><h5 id="所以slcacbcz"><a class="markdownIt-Anchor" href="#所以slcacbcz"></a> 所以S[L]=C<sub>a</sub>+C<sub>b</sub>+…+C<sub>z</sub></h5><p>要实现这一操作，就要从L开始将S[L],S[L-lowbit(L)]…加入S[L]，直到L==0</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;<br>        ret+=a[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>&#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="updatex"><a class="markdownIt-Anchor" href="#updatex"></a> update(x):</h4><p>对单一值更新之后，要对包含x的C<sub>i</sub>都进行更新</p><p>实现操作，要从x向上，直到x&gt;n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;<br>        C[x]++;<span class="hljs-comment">//更新</span><br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题-ping-pong"><a class="markdownIt-Anchor" href="#例题-ping-pong"></a> 例题    Ping pong</h3><p><a href="https://vjudge.net/problem/UVALive-4329">UVALive - 4329 </a></p><h5 id="首先选手的位置不能改变-而对于某个选手i假设他为裁判此时在他之前比他小的有ci个在他之后比他小的有di个那么i选手做裁判的情况就有cin-i-dii-ci-1-di"><a class="markdownIt-Anchor" href="#首先选手的位置不能改变-而对于某个选手i假设他为裁判此时在他之前比他小的有ci个在他之后比他小的有di个那么i选手做裁判的情况就有cin-i-dii-ci-1-di"></a> 首先，选手的位置不能改变。而对于某个选手i，假设他为裁判，此时在他之前比他小的有c<sub>i</sub>个,在他之后比他小的有d<sub>i</sub>个，那么i选手做裁判的情况就有c<sub>i</sub>*(n-i-d<sub>i</sub>)+(i-c<sub>i</sub>-1) *d<sub>i</sub></h5><h5 id="问题转换为求ci和di"><a class="markdownIt-Anchor" href="#问题转换为求ci和di"></a> 问题转换为求c<sub>i</sub>和d<sub>i</sub></h5><h5 id="由小到大遍历1-n每移动一位就在xai并求xai的前缀和这是一个经典的bit问题"><a class="markdownIt-Anchor" href="#由小到大遍历1-n每移动一位就在xai并求xai的前缀和这是一个经典的bit问题"></a> 由小到大遍历1-n，每移动一位就在x[a[i]]++,并求x[a[i]]的前缀和，这是一个经典的BIT问题</h5><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100100</span>;<br><span class="hljs-type">int</span> a[N],b[N],c[N],d[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x) &#123;<br>ret+=b[x];<br>x-=<span class="hljs-built_in">lowbit</span>(x);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> d)</span> </span>&#123;<br><span class="hljs-keyword">while</span>(x&lt;=N<span class="hljs-number">-1</span>) &#123;<br>b[x]+=d;<br>x+=<span class="hljs-built_in">lowbit</span>(x);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--) &#123;<br><span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(c));<br><span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(d));<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br><span class="hljs-built_in">add</span>(a[i],<span class="hljs-number">1</span>);<br>c[i]=<span class="hljs-built_in">sum</span>(a[i]<span class="hljs-number">-1</span>);<br><span class="hljs-comment">//printf(&quot;%d &quot;,c[i]);</span><br>&#125;<br><span class="hljs-comment">//printf(&quot;\n&quot;);</span><br><span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n; i&gt;=<span class="hljs-number">1</span>; i--) &#123;<br><span class="hljs-built_in">add</span>(a[i],<span class="hljs-number">1</span>);<br>d[i]=<span class="hljs-built_in">sum</span>(a[i]<span class="hljs-number">-1</span>);<br><span class="hljs-comment">//printf(&quot;%d &quot;,d[i]);</span><br>&#125;<br><span class="hljs-comment">//printf(&quot;\n&quot;);</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ret=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>ret+=c[i]*(n-i-d[i])+(i-c[i]<span class="hljs-number">-1</span>)*d[i];<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ret);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><h4 id="bit本质上还是前缀和他通过lowbit将前缀和数组拆分从而使修改的复杂度从on降到ologn-从而使动态的区间问题的整体复杂度降至onlogn"><a class="markdownIt-Anchor" href="#bit本质上还是前缀和他通过lowbit将前缀和数组拆分从而使修改的复杂度从on降到ologn-从而使动态的区间问题的整体复杂度降至onlogn"></a> BIT本质上还是前缀和，他通过lowbit将前缀和数组拆分，从而使修改的复杂度从O(n)降到O(logn)。从而使动态的区间问题的整体复杂度降至O(nlogn)</h4>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区间操作</tag>
      
      <tag>树状数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高精度算法-面向对象</title>
    <link href="/2022/03/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/03/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="高精度算法-面向对象"><a class="markdownIt-Anchor" href="#高精度算法-面向对象"></a> 高精度算法-面向对象</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">private</span>:<br>string s;<br><span class="hljs-type">int</span> num[<span class="hljs-number">1100</span>],len;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(B)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(B)</span></span>;<br><span class="hljs-built_in">B</span>() &#123;<br>s=<span class="hljs-string">&quot;&quot;</span>;<br>len=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(num,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(num));<br>&#125;<br><span class="hljs-built_in">B</span>(string a) &#123;<br>s=a;<br>len=s.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)num[i]=s[len-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &gt;=(<span class="hljs-type">const</span> B&amp; a) &#123;<br><span class="hljs-keyword">if</span>(len&gt;a.len)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(len==a.len)<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-keyword">if</span>(num[i]&gt;a.num[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num[i]&lt;a.num[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>B&amp; <span class="hljs-keyword">operator</span> =(<span class="hljs-type">const</span> B&amp; a) &#123;<br><span class="hljs-keyword">this</span>-&gt;len=a.len;<br><span class="hljs-keyword">this</span>-&gt;s=a.s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)<span class="hljs-keyword">this</span>-&gt;num[i]=a.num[i];<br><span class="hljs-keyword">return</span>*<span class="hljs-keyword">this</span>;<br>&#125;<br>B <span class="hljs-keyword">operator</span> +(B b) &#123;<br>B tmp;<br>tmp.len=<span class="hljs-built_in">max</span>(len,b.len);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">max</span>(len,b.len); i++) &#123;<br>tmp.num[i]+=b.num[i]+num[i];<br>tmp.num[i+<span class="hljs-number">1</span>]+=tmp.num[i]/<span class="hljs-number">10</span>;<br>tmp.num[i]%=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tmp.num[tmp.len]&gt;<span class="hljs-number">0</span>)tmp.len++;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> -(B b) &#123;<br>B tmp;<br>tmp.len=<span class="hljs-built_in">max</span>(len,b.len);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;tmp.len; i++) &#123;<br>tmp.num[i]=num[i]-b.num[i];<br><span class="hljs-keyword">if</span>(tmp.num[i]&lt;<span class="hljs-number">0</span>) &#123;<br>tmp.num[i+<span class="hljs-number">1</span>]--;<br>tmp.num[i]+=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(tmp.num[tmp.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;tmp.len&gt;<span class="hljs-number">1</span>)tmp.len--;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> *(B b) &#123;<br>B tmp;<br>tmp.len=len+b.len+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;b.len; j++) &#123;<br>tmp.num[i+j]+=num[i]*b.num[j];<br>tmp.num[i+j+<span class="hljs-number">1</span>]+=tmp.num[i+j]/<span class="hljs-number">10</span>;<br>tmp.num[i+j]%=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(tmp.num[tmp.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;tmp.len&gt;<span class="hljs-number">1</span>)tmp.len--;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> /(B b) &#123;<br>B tmp,<span class="hljs-built_in">ans</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-function">B <span class="hljs-title">one</span><span class="hljs-params">(<span class="hljs-string">&quot;0&quot;</span>)</span></span>;<br>tmp.len=len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)tmp.num[i]=num[i];<br><span class="hljs-type">int</span> diff=len-b.len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=tmp.len<span class="hljs-number">-1</span>; i&gt;=b.len<span class="hljs-number">-1</span>; i--) &#123;<br>B t;<br>t.len=b.len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>-b.len; j&lt;=i; j++)&#123;<br>t.num[j-diff]=tmp.num[j];<br>&#125;<br><span class="hljs-keyword">while</span>(t&gt;=b) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>-b.len; j&lt;=i; j++) &#123;<br>tmp.num[j]-=b.num[j-diff];<br><span class="hljs-keyword">if</span>(tmp.num[j]&lt;<span class="hljs-number">0</span>)&#123;<br>tmp.num[j]+=<span class="hljs-number">10</span>;<br>tmp.num[j+<span class="hljs-number">1</span>]--;<br>&#125;<br>t.num[j-diff]=tmp.num[j];<br>&#125;<br>one.num[i-b.len+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>one.len=i-b.len+<span class="hljs-number">2</span>;<br>ans=ans+one;<br>&#125;<br>one.num[i-b.len+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>diff--;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;tmp.num[i]&gt;<span class="hljs-number">0</span>)tmp.num[i<span class="hljs-number">-1</span>]+=tmp.num[i]*<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(B a)</span> </span>&#123;<br>cin&gt;&gt;a.s;<br>a.len=a.s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=a.len; i--) &#123;<br>a.num[i]=a.s[a.len-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-type">const</span> B a)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.len<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>cout&lt;&lt;a.num[i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//input(a);</span><br><span class="hljs-function">B <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;1816324242342&quot;</span>)</span></span>;<br><span class="hljs-function">B <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;233333&quot;</span>)</span></span>;<br>B c=a/b;<br><span class="hljs-built_in">output</span>(c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高精度</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>那就别担心了-PTA补题</title>
    <link href="/2022/03/21/%E2%80%9D%E9%82%A3%E5%B0%B1%E5%88%AB%E6%8B%85%E5%BF%83%E4%BA%86-PTA%E8%A1%A5%E9%A2%98%E2%80%9C/"/>
    <url>/2022/03/21/%E2%80%9D%E9%82%A3%E5%B0%B1%E5%88%AB%E6%8B%85%E5%BF%83%E4%BA%86-PTA%E8%A1%A5%E9%A2%98%E2%80%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="那就别担心了-pta-l3"><a class="markdownIt-Anchor" href="#那就别担心了-pta-l3"></a> 那就别担心了 PTA L3</h1><h2 id="常规dfs"><a class="markdownIt-Anchor" href="#常规dfs"></a> 常规dfs</h2><p>比赛的时候题意没搞清楚，写了个dfs结果拿了18分就寄了。大概就是问起点到终点一共有几个不同走法，然后问是否从起点开始的所有路径都只能通往终点。</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">550</span>;<br><span class="hljs-type">int</span> cnt[N],vis[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;t[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>vis[u]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(cnt[u])<span class="hljs-keyword">return</span> cnt[u];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:t[u])&#123;<br>cnt[u]+=<span class="hljs-built_in">dfs</span>(v);<br>&#125;<br><span class="hljs-keyword">return</span> cnt[u];<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-type">int</span> u,v;<br>cin&gt;&gt;u&gt;&gt;v;<br>t[u].<span class="hljs-built_in">push_back</span>(v);<br>&#125;<br><span class="hljs-type">int</span> st,ed;<br>cin&gt;&gt;st&gt;&gt;ed;<br>cnt[ed]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(st);<br>cout&lt;&lt;cnt[st]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>((vis[i]&amp;&amp;cnt[i]==<span class="hljs-number">0</span>))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包问题</title>
    <link href="/2022/03/15/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/15/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> <strong>背包问题</strong></h1><h2 id="p1048-noip2005-普及组-采药"><a class="markdownIt-Anchor" href="#p1048-noip2005-普及组-采药"></a> P1048 [NOIP2005 普及组] 采药</h2><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h2><p>第一行有 2 个整数 T（1≤T≤1000）和 M（1≤<em>M</em>≤100），用一个空格隔开，<em>T</em> 代表总共能够用来采药的时间，<em>M</em> 代表山洞里的草药的数目。</p><p>接下来的 <em>M</em> 行每行包括两个在 1 到 100之间（包括 1 和 100）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h2 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h2><p><strong>输入 #1</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="说明提示"><a class="markdownIt-Anchor" href="#说明提示"></a> 说明/提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 30% 的数据 <em>M</em>≤10；</li><li>对于全部的数据 <em>M</em>≤100。</li></ul><h3 id="思路部分"><a class="markdownIt-Anchor" href="#思路部分"></a> 思路部分</h3><p>想了一下dfs至少能a掉30%的数据，但这不是我们的本意，本意当然是想到dp的做法</p><p>抽象一下题意，我们要做的是求在n个草药中选择，使容量为W的背包获得的价值最大</p><p>因此我们设dp[i] [j]表示容量为j的选择前i个草药能获得的最大价值，以此可以表示最终答案的状态</p><p>要求出最终答案，我们要解决最终答案的子问题</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><h5 id="优化空间复杂度"><a class="markdownIt-Anchor" href="#优化空间复杂度"></a> 优化空间复杂度</h5><p>我们发现，我们在状态转移时并没有利用i的，换言之，要求dp[i] [j]，我们不关心前i个草药怎么选，我们只要知道容量小的背包的最优解即可完成状态的转移。因此可以只设dp[j]，表示容量为j的背包的最优价值。</p><h6 id="思考一下为什么要从后往前遍历"><a class="markdownIt-Anchor" href="#思考一下为什么要从后往前遍历"></a> 思考一下，为什么要从后往前遍历</h6><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">10000010</span>];<br><span class="hljs-type">int</span> w[<span class="hljs-number">10010</span>],v[<span class="hljs-number">10010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,t;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;t,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;v[i]) ;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=t; j&gt;=w[i]; j--) &#123;<br>dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[i]]+<span class="hljs-number">1ll</span>*v[i]);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,dp[t]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="p1616-疯狂的采药"><a class="markdownIt-Anchor" href="#p1616-疯狂的采药"></a> P1616 疯狂的采药</h1><h2 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h2><p>LiYuxiang 是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是 LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><ol><li><p>每种草药可以无限制地疯狂采摘。</p></li><li><p>药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p></li></ol><h2 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h2><p>输入第一行有两个整数，分别代表总共能够用来采药的时间 <em>t</em> 和代表山洞里的草药的数目 <em>m</em>。</p><p>第 2 到第(<em>m</em>+1) 行，每行两个整数，第(<em>i</em>+1) 行的整数 a<sub>i</sub>, b<sub>i</sub> 分别表示采摘第 i 种草药的时间和该草药的价值。</p><h2 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h2><p>输出一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h2 id="输入输出样例-2"><a class="markdownIt-Anchor" href="#输入输出样例-2"></a> 输入输出样例</h2><p><strong>输入 #1</strong>复制</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">140<br></code></pre></td></tr></table></figure><h2 id="说明提示-2"><a class="markdownIt-Anchor" href="#说明提示-2"></a> 说明/提示</h2><h4 id="数据规模与约定"><a class="markdownIt-Anchor" href="#数据规模与约定"></a> 数据规模与约定</h4><ul><li><p>对于 30% 的数据，保证m≤10<sup>3</sup> 。</p></li><li><p>对于 100% 的数据，保证 1≤<em>m</em>≤10<sup>4</sup>，1≤<em>t</em>≤10<sup>7</sup>，且 1≤<em>m</em>×<em>t</em>≤10<sup>7</sup>，1≤a<sub>i</sub>*,*b<sub>i</sub>≤10<sup>4</sup>。</p><p>转化为等价于价值为k*v[i]，花费为k*****w[i]的物品</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo>∗</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>k</mi><mo>∗</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mi mathvariant="normal">∗</mi><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">dp[i][j]=max(dp[i-1][j],dp[i-1][j-k*w[i]]+k*v[i])0≤k∗c[i]≤j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">∗</span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span></span></p><h4 id="时间优化"><a class="markdownIt-Anchor" href="#时间优化"></a> 时间优化</h4><p>状态更新的方式决定了物品的数量，从前往后更新,可以更新到已选本身的状态，于是达到无限选择物品目的</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">10000010</span>];<br><span class="hljs-type">int</span> w[<span class="hljs-number">10010</span>],v[<span class="hljs-number">10010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,t;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;t,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;v[i]) ;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i]; j&lt;=t; j++) &#123;<br>dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[i]]+<span class="hljs-number">1ll</span>*v[i]);<br>&#125;<br>&#125;<br>    <span class="hljs-comment">/*for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="hljs-comment">    for(int j=W;j&gt;=w[i];j--)&#123;</span><br><span class="hljs-comment">    for(int k=1;k&lt;m[i];k++)&#123;</span><br><span class="hljs-comment">    dp[i][j]=max(dp[i-1][j],dp[i-1][j-k*w[i]]+k*v[i]);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,dp[t]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="思考一下为什么又变成了从前往后更新"><a class="markdownIt-Anchor" href="#思考一下为什么又变成了从前往后更新"></a> 思考一下，为什么又变成了从前往后更新</h6><blockquote><p>能用动规解决的问题的特点</p><p>能采用动态规划求解的问题的一般要具有3个性质：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1)</span> 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。<br><br><span class="hljs-comment">(2)</span> 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。<br>（<span class="hljs-number">3</span>）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）<br></code></pre></td></tr></table></figure><p>动规解题的一般思路</p><p>动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gcode">初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态<br><br>            图<span class="hljs-number">1</span> 动态规划决策过程示意图<br><br><span class="hljs-comment">(1)</span>划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。<br><br><span class="hljs-comment">(2)</span>确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。<br><br><span class="hljs-comment">(3)</span>确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。<br><br><span class="hljs-comment">(4)</span>寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。<br></code></pre></td></tr></table></figure><p>算法实现的说明</p><p>动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p><p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p><p>（1）问题的阶段 （2）每个阶段的状态</p><p>（3）从前一个阶段转化到后一个阶段之间的递推关系。</p><hr /><p>版权声明：本文为CSDN博主「zw6161080123」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：<a href="https://blog.csdn.net/zw6161080123/article/details/80639932">https://blog.csdn.net/zw6161080123/article/details/80639932</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>背包</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/15/hello-world/"/>
    <url>/2022/03/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
