<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>高精度算法-面向对象</title>
    <link href="/2022/03/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/03/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="高精度算法-面向对象"><a href="#高精度算法-面向对象" class="headerlink" title="高精度算法-面向对象"></a>高精度算法-面向对象</h1><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">private</span>:<br>string s;<br><span class="hljs-type">int</span> num[<span class="hljs-number">1100</span>],len;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(B)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(B)</span></span>;<br><span class="hljs-built_in">B</span>() &#123;<br>s=<span class="hljs-string">&quot;&quot;</span>;<br>len=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(num,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(num));<br>&#125;<br><span class="hljs-built_in">B</span>(string a) &#123;<br>s=a;<br>len=s.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)num[i]=s[len-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &gt;=(<span class="hljs-type">const</span> B&amp; a) &#123;<br><span class="hljs-keyword">if</span>(len&gt;a.len)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(len==a.len)<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-keyword">if</span>(num[i]&gt;a.num[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num[i]&lt;a.num[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>B&amp; <span class="hljs-keyword">operator</span> =(<span class="hljs-type">const</span> B&amp; a) &#123;<br><span class="hljs-keyword">this</span>-&gt;len=a.len;<br><span class="hljs-keyword">this</span>-&gt;s=a.s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)<span class="hljs-keyword">this</span>-&gt;num[i]=a.num[i];<br><span class="hljs-keyword">return</span>*<span class="hljs-keyword">this</span>;<br>&#125;<br>B <span class="hljs-keyword">operator</span> +(B b) &#123;<br>B tmp;<br>tmp.len=<span class="hljs-built_in">max</span>(len,b.len);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">max</span>(len,b.len); i++) &#123;<br>tmp.num[i]+=b.num[i]+num[i];<br>tmp.num[i+<span class="hljs-number">1</span>]+=tmp.num[i]/<span class="hljs-number">10</span>;<br>tmp.num[i]%=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tmp.num[tmp.len]&gt;<span class="hljs-number">0</span>)tmp.len++;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> -(B b) &#123;<br>B tmp;<br>tmp.len=<span class="hljs-built_in">max</span>(len,b.len);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;tmp.len; i++) &#123;<br>tmp.num[i]=num[i]-b.num[i];<br><span class="hljs-keyword">if</span>(tmp.num[i]&lt;<span class="hljs-number">0</span>) &#123;<br>tmp.num[i+<span class="hljs-number">1</span>]--;<br>tmp.num[i]+=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(tmp.num[tmp.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;tmp.len&gt;<span class="hljs-number">1</span>)tmp.len--;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> *(B b) &#123;<br>B tmp;<br>tmp.len=len+b.len+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;b.len; j++) &#123;<br>tmp.num[i+j]+=num[i]*b.num[j];<br>tmp.num[i+j+<span class="hljs-number">1</span>]+=tmp.num[i+j]/<span class="hljs-number">10</span>;<br>tmp.num[i+j]%=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(tmp.num[tmp.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>&amp;&amp;tmp.len&gt;<span class="hljs-number">1</span>)tmp.len--;<br><span class="hljs-keyword">return</span> tmp;<br>&#125;<br>B <span class="hljs-keyword">operator</span> /(B b) &#123;<br>B tmp,<span class="hljs-built_in">ans</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-function">B <span class="hljs-title">one</span><span class="hljs-params">(<span class="hljs-string">&quot;0&quot;</span>)</span></span>;<br>tmp.len=len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)tmp.num[i]=num[i];<br><span class="hljs-type">int</span> diff=len-b.len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=tmp.len<span class="hljs-number">-1</span>; i&gt;=b.len<span class="hljs-number">-1</span>; i--) &#123;<br>B t;<br>t.len=b.len;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>-b.len; j&lt;=i; j++)&#123;<br>t.num[j-diff]=tmp.num[j];<br>&#125;<br><span class="hljs-keyword">while</span>(t&gt;=b) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>-b.len; j&lt;=i; j++) &#123;<br>tmp.num[j]-=b.num[j-diff];<br><span class="hljs-keyword">if</span>(tmp.num[j]&lt;<span class="hljs-number">0</span>)&#123;<br>tmp.num[j]+=<span class="hljs-number">10</span>;<br>tmp.num[j+<span class="hljs-number">1</span>]--;<br>&#125;<br>t.num[j-diff]=tmp.num[j];<br>&#125;<br>one.num[i-b.len+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>one.len=i-b.len+<span class="hljs-number">2</span>;<br>ans=ans+one;<br>&#125;<br>one.num[i-b.len+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>diff--;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;tmp.num[i]&gt;<span class="hljs-number">0</span>)tmp.num[i<span class="hljs-number">-1</span>]+=tmp.num[i]*<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(B a)</span> </span>&#123;<br>cin&gt;&gt;a.s;<br>a.len=a.s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=a.len; i--) &#123;<br>a.num[i]=a.s[a.len-i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-type">const</span> B a)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.len<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>cout&lt;&lt;a.num[i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//input(a);</span><br><span class="hljs-function">B <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;1816324242342&quot;</span>)</span></span>;<br><span class="hljs-function">B <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;233333&quot;</span>)</span></span>;<br>B c=a/b;<br><span class="hljs-built_in">output</span>(c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>那就别担心了-PTA补题</title>
    <link href="/2022/03/21/%E2%80%9D%E9%82%A3%E5%B0%B1%E5%88%AB%E6%8B%85%E5%BF%83%E4%BA%86-PTA%E8%A1%A5%E9%A2%98%E2%80%9C/"/>
    <url>/2022/03/21/%E2%80%9D%E9%82%A3%E5%B0%B1%E5%88%AB%E6%8B%85%E5%BF%83%E4%BA%86-PTA%E8%A1%A5%E9%A2%98%E2%80%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="那就别担心了-PTA-L3"><a href="#那就别担心了-PTA-L3" class="headerlink" title="那就别担心了 PTA L3"></a>那就别担心了 PTA L3</h1><h2 id="常规dfs"><a href="#常规dfs" class="headerlink" title="常规dfs"></a>常规dfs</h2><p>比赛的时候题意没搞清楚，写了个dfs结果拿了18分就寄了。大概就是问起点到终点一共有几个不同走法，然后问是否从起点开始的所有路径都只能通往终点。</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">550</span>;<br><span class="hljs-type">int</span> cnt[N],vis[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;t[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>vis[u]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(cnt[u])<span class="hljs-keyword">return</span> cnt[u];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:t[u])&#123;<br>cnt[u]+=<span class="hljs-built_in">dfs</span>(v);<br>&#125;<br><span class="hljs-keyword">return</span> cnt[u];<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-type">int</span> u,v;<br>cin&gt;&gt;u&gt;&gt;v;<br>t[u].<span class="hljs-built_in">push_back</span>(v);<br>&#125;<br><span class="hljs-type">int</span> st,ed;<br>cin&gt;&gt;st&gt;&gt;ed;<br>cnt[ed]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(st);<br>cout&lt;&lt;cnt[st]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>((vis[i]&amp;&amp;cnt[i]==<span class="hljs-number">0</span>))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>背包问题</title>
    <link href="/2022/03/15/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/15/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a><strong>背包问题</strong></h1><h2 id="P1048-NOIP2005-普及组-采药"><a href="#P1048-NOIP2005-普及组-采药" class="headerlink" title="P1048 [NOIP2005 普及组] 采药"></a>P1048 [NOIP2005 普及组] 采药</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有 2 个整数 T（1≤T≤1000）和 M（1≤<em>M</em>≤100），用一个空格隔开，<em>T</em> 代表总共能够用来采药的时间，<em>M</em> 代表山洞里的草药的数目。</p><p>接下来的 <em>M</em> 行每行包括两个在 1 到 100之间（包括 1 和 100）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">70 3</span><br><span class="line">71 100</span><br><span class="line">69 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="说明-x2F-提示"><a href="#说明-x2F-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 30% 的数据 <em>M</em>≤10；</li><li>对于全部的数据 <em>M</em>≤100。</li></ul><h3 id="思路部分"><a href="#思路部分" class="headerlink" title="思路部分"></a>思路部分</h3><p>想了一下dfs至少能a掉30%的数据，但这不是我们的本意，本意当然是想到dp的做法</p><p>抽象一下题意，我们要做的是求在n个草药中选择，使容量为W的背包获得的价值最大</p><p>因此我们设dp[i] [j]表示容量为j的选择前i个草药能获得的最大价值，以此可以表示最终答案的状态</p><p>要求出最终答案，我们要解决最终答案的子问题</p><p>$$<br>dp[i][j]&#x3D;max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])<br>$$</p><h5 id="优化空间复杂度"><a href="#优化空间复杂度" class="headerlink" title="优化空间复杂度"></a>优化空间复杂度</h5><p>我们发现，我们在状态转移时并没有利用i的，换言之，要求dp[i] [j]，我们不关心前i个草药怎么选，我们只要知道容量小的背包的最优解即可完成状态的转移。因此可以只设dp[j]，表示容量为j的背包的最优价值。</p><h6 id="思考一下，为什么要从后往前遍历"><a href="#思考一下，为什么要从后往前遍历" class="headerlink" title="思考一下，为什么要从后往前遍历"></a>思考一下，为什么要从后往前遍历</h6><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">10000010</span>];</span><br><span class="line"><span class="type">int</span> w[<span class="number">10010</span>],v[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;v[i]) ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=t; j&gt;=w[i]; j--) &#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+<span class="number">1ll</span>*v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P1616-疯狂的采药"><a href="#P1616-疯狂的采药" class="headerlink" title="P1616 疯狂的采药"></a>P1616 疯狂的采药</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>LiYuxiang 是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是 LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><ol><li><p>每种草药可以无限制地疯狂采摘。</p></li><li><p>药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p></li></ol><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入第一行有两个整数，分别代表总共能够用来采药的时间 <em>t</em> 和代表山洞里的草药的数目 <em>m</em>。</p><p>第 2 到第(<em>m</em>+1) 行，每行两个整数，第(<em>i</em>+1) 行的整数 a<del>i</del>, b<del>i</del> 分别表示采摘第 i 种草药的时间和该草药的价值。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h2 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">70 3</span><br><span class="line">71 100</span><br><span class="line">69 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">140</span><br></pre></td></tr></table></figure><h2 id="说明-x2F-提示-1"><a href="#说明-x2F-提示-1" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li><p>对于 30% 的数据，保证m≤10^3^ 。</p></li><li><p>对于 100% 的数据，保证 1≤<em>m</em>≤10^4^，1≤<em>t</em>≤10^7^，且 1≤<em>m</em>×<em>t</em>≤10^7^，1≤a<del>i</del>*,*b<del>i</del>≤10^4^。</p><p>转化为等价于价值为k*v[i]，花费为k*****w[i]的物品</p><p>$$<br>dp[i][j]&#x3D;max(dp[i-1][j],dp[i-1][j-k<em>w[i]]+k</em>v[i])0≤k∗c[i]≤j<br>$$</p><h4 id="时间优化"><a href="#时间优化" class="headerlink" title="时间优化"></a>时间优化</h4><p>状态更新的方式决定了物品的数量，从前往后更新,可以更新到已选本身的状态，于是达到无限选择物品目的</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">10000010</span>];</span><br><span class="line"><span class="type">int</span> w[<span class="number">10010</span>],v[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;w[i],&amp;v[i]) ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=w[i]; j&lt;=t; j++) &#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+<span class="number">1ll</span>*v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(int j=W;j&gt;=w[i];j--)&#123;</span></span><br><span class="line"><span class="comment">    for(int k=1;k&lt;m[i];k++)&#123;</span></span><br><span class="line"><span class="comment">    dp[i][j]=max(dp[i-1][j],dp[i-1][j-k*w[i]]+k*v[i]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,dp[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="思考一下，为什么又变成了从前往后更新"><a href="#思考一下，为什么又变成了从前往后更新" class="headerlink" title="思考一下，为什么又变成了从前往后更新"></a>思考一下，为什么又变成了从前往后更新</h6><blockquote><p>能用动规解决的问题的特点 </p><p>能采用动态规划求解的问题的一般要具有3个性质：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</span><br><span class="line"></span><br><span class="line">(2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</span><br><span class="line">（3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</span><br></pre></td></tr></table></figure><p>动规解题的一般思路   </p><p>动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</span><br><span class="line"></span><br><span class="line">            图1 动态规划决策过程示意图</span><br><span class="line"></span><br><span class="line">(1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</span><br><span class="line"></span><br><span class="line">(2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</span><br><span class="line"></span><br><span class="line">(3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</span><br><span class="line"></span><br><span class="line">(4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</span><br></pre></td></tr></table></figure><p>算法实现的说明</p><p>动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p><p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p><p>（1）问题的阶段 （2）每个阶段的状态</p><p>（3）从前一个阶段转化到后一个阶段之间的递推关系。</p><hr><p>版权声明：本文为CSDN博主「zw6161080123」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zw6161080123/article/details/80639932">https://blog.csdn.net/zw6161080123/article/details/80639932</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/15/hello-world/"/>
    <url>/2022/03/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
